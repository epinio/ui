---
project_name: epinio-ui

archives:
  - name_template: '{{ .ProjectName }}-{{ .Os }}-{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}'
    replacements:
      amd64: x86_64
    format: binary
    format_overrides:
      - goos: windows
        format: zip

before:
  hooks:
    - sh -c "cd backend/src/jetstream && go mod download"

dist: /tmp/_dist

# binary builds
builds:

  # amd64
  - id: epinio-ui-amd64
    dir: backend/src/jetstream
    binary: epinio-ui
    ldflags:
      - -w -s -X "main.appVersion={{ .Tag }}"
    goos:
      - linux
    goarch:
      - amd64
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++

  # arm64
  - id: epinio-ui-arm64
    dir: backend/src/jetstream
    binary: epinio-ui
    ldflags:
      - -w -s -X "main.appVersion={{ .Tag }}"
    goos:
      - linux
    goarch:
      - arm64
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++

  # s390x
  - id: epinio-ui-s390x
    dir: backend/src/jetstream
    binary: epinio-ui
    ldflags:
      - -w -s -X "main.appVersion={{ .Tag }}"
    goos:
      - linux
    goarch:
      - s390x
    env:
      - CC=s390x-linux-gnu-gcc
      - CXX=s390x-linux-gnu-g++

changelog:
  skip: false

snapshot:
  name_template: "{{ .Tag }}-next"

# docker build
dockers:

  # amd64
  - id: epinio-ui-amd64
    goos: linux
    goarch: amd64
    use: buildx
    dockerfile: backend/Dockerfile

    # IDs to filter the binaries/packages.
    ids:
    - epinio-ui-amd64

    # Templates of the Docker image names.
    image_templates:
    - "ghcr.io/epinio/epinio-ui:{{ .Tag }}-amd64"
    - "ghcr.io/epinio/epinio-ui:latest-amd64"

    # Skips the docker push.
    #skip_push: "true"

    # Template of the docker build flags.
    build_flag_templates:
    - "--pull"
    - "--label=org.opencontainers.image.created={{.Date}}"
    - "--label=org.opencontainers.image.title={{.ProjectName}}"
    - "--label=org.opencontainers.image.revision={{.FullCommit}}"
    - "--label=org.opencontainers.image.version={{.Version}}"
    - "--label=epinio.io.ui.source={{.Env.UI_BUNDLE_URL}}"
    - "--label=org.opencontainers.image.source=https://github.com/epinio/ui"
    - "--build-arg=DIST_BINARY=epinio-ui"
    - "--platform=linux/amd64"

    # If your Dockerfile copies files other than binaries and packages,
    # you should list them here as well.
    # Note that GoReleaser will create the same structure inside a temporary
    # folder, so if you add `foo/bar.json` here, on your Dockerfile you can
    # `COPY foo/bar.json /whatever.json`.
    # Also note that the paths here are relative to the folder in which
    # GoReleaser is being run (usually the repository root folder).
    # This field does not support wildcards, you can add an entire folder here
    # and use wildcards when you `COPY`/`ADD` in your Dockerfile.
    extra_files:
    - backend/ui/

  # arm64
  - id: epinio-ui-arm64
    goos: linux
    goarch: arm64
    use: buildx
    dockerfile: backend/Dockerfile

    # IDs to filter the binaries/packages.
    ids:
    - epinio-ui-arm64

    # Templates of the Docker image names.
    image_templates:
    - "ghcr.io/epinio/epinio-ui:{{ .Tag }}-arm64v8"
    - "ghcr.io/epinio/epinio-ui:latest-arm64v8"

    # Skips the docker push.
    #skip_push: "true"

    # Template of the docker build flags.
    build_flag_templates:
    - "--pull"
    - "--label=org.opencontainers.image.created={{.Date}}"
    - "--label=org.opencontainers.image.title={{.ProjectName}}"
    - "--label=org.opencontainers.image.revision={{.FullCommit}}"
    - "--label=org.opencontainers.image.version={{.Version}}"
    - "--label=epinio.io.ui.source={{.Env.UI_BUNDLE_URL}}"
    - "--label=org.opencontainers.image.source=https://github.com/epinio/ui"
    - "--build-arg=DIST_BINARY=epinio-ui"
    - "--platform=linux/arm64/v8"

    # If your Dockerfile copies files other than binaries and packages,
    # you should list them here as well.
    # Note that GoReleaser will create the same structure inside a temporary
    # folder, so if you add `foo/bar.json` here, on your Dockerfile you can
    # `COPY foo/bar.json /whatever.json`.
    # Also note that the paths here are relative to the folder in which
    # GoReleaser is being run (usually the repository root folder).
    # This field does not support wildcards, you can add an entire folder here
    # and use wildcards when you `COPY`/`ADD` in your Dockerfile.
    extra_files:
    - backend/ui/

  # s390x
  - id: epinio-ui-s390x
    goos: linux
    goarch: s390x
    use: buildx
    dockerfile: backend/Dockerfile

    # IDs to filter the binaries/packages.
    ids:
    - epinio-ui-s390x

    # Templates of the Docker image names.
    image_templates:
    - "ghcr.io/epinio/epinio-ui:{{ .Tag }}-s390x"
    - "ghcr.io/epinio/epinio-ui:latest-s390x"

    # Skips the docker push.
    #skip_push: "true"

    # Template of the docker build flags.
    build_flag_templates:
    - "--pull"
    - "--label=org.opencontainers.image.created={{.Date}}"
    - "--label=org.opencontainers.image.title={{.ProjectName}}"
    - "--label=org.opencontainers.image.revision={{.FullCommit}}"
    - "--label=org.opencontainers.image.version={{.Version}}"
    - "--label=epinio.io.ui.source={{.Env.UI_BUNDLE_URL}}"
    - "--label=org.opencontainers.image.source=https://github.com/epinio/ui"
    - "--build-arg=DIST_BINARY=epinio-ui"
    - "--platform=linux/s390x"

    # If your Dockerfile copies files other than binaries and packages,
    # you should list them here as well.
    # Note that GoReleaser will create the same structure inside a temporary
    # folder, so if you add `foo/bar.json` here, on your Dockerfile you can
    # `COPY foo/bar.json /whatever.json`.
    # Also note that the paths here are relative to the folder in which
    # GoReleaser is being run (usually the repository root folder).
    # This field does not support wildcards, you can add an entire folder here
    # and use wildcards when you `COPY`/`ADD` in your Dockerfile.
    extra_files:
    - backend/ui/

docker_manifests:
  -
    name_template: "ghcr.io/epinio/epinio-ui:latest"
    image_templates:
    - ghcr.io/epinio/epinio-ui:{{ .Tag }}-amd64
    - ghcr.io/epinio/epinio-ui:{{ .Tag }}-arm64v8
    - ghcr.io/epinio/epinio-ui:{{ .Tag }}-s390x
  -
    name_template: "ghcr.io/epinio/epinio-ui:{{ .Tag }}"
    image_templates:
    - ghcr.io/epinio/epinio-ui:{{ .Tag }}-amd64
    - ghcr.io/epinio/epinio-ui:{{ .Tag }}-arm64v8
    - ghcr.io/epinio/epinio-ui:{{ .Tag }}-s390x

# Based on https://blog.goreleaser.com/goreleaser-and-software-supply-chain-security-e8917b26924b
##

# creates SBOMs of all archives and the source tarball using syft
# https://goreleaser.com/customization/sbom
# Two different sbom configurations need two different IDs

sboms:
  - id: archive 
    artifacts: archive
  - id: source
    artifacts: source

# signs our docker images
# https://goreleaser.com/customization/docker_sign

docker_signs:
  - cmd: cosign
    env:
    - COSIGN_EXPERIMENTAL=1
    artifacts: all
    output: true
    args:
    - 'sign'
    - '${artifact}'

# signs the checksum file and other blobs. all files (including the sboms) are included in the
# checksum, so we don't need to sign each one if we don't want to
# https://goreleaser.com/customization/sign

signs:
- cmd: cosign
  env:
  - COSIGN_EXPERIMENTAL=1
  certificate: '${artifact}.pem'
  args:
    - sign-blob
    - '--output-certificate=${certificate}'
    - '--output-signature=${signature}'
    - '${artifact}'
  artifacts: checksum
  output: true
