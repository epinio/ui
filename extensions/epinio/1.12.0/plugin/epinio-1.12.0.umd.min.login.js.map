{"version":3,"file":"epinio-1.12.0.umd.min.login.js","mappings":"kQAGA,MAAMA,EAAa,CAAEC,MAAO,eACtBC,EAAa,CAAC,YAMpB,OAA4BC,EAAAA,EAAAA,iBAAiB,CAC3CC,OAAQ,SACRC,MAAO,CACLC,KAAM,CAAC,GAETC,KAAAA,CAAMC,GCXR,MAAMC,GAAQC,EAAAA,EAAAA,MACRC,GAAUC,EAAAA,EAAAA,MAAa,GAC7B,IAAIC,GAAeD,EAAAA,EAAAA,KAAY,CAAC,GAChC,MAAME,EAAIL,EAAMM,QAAQ,UAElBV,EAAQG,EAkDd,SAASQ,IACPP,EAAMQ,SAAS,kBAAmBJ,EAAaK,MACjD,CDaA,OC7DAC,EAAAA,EAAAA,WAAUC,UASR,MAAMC,QAAkBZ,EAAMQ,SAC5B,mBACA,CAAEK,SAAU,WAERC,QAAqBd,EAAMQ,SAAS,mBAAoBI,GACxDG,QAAYf,EAAMQ,SACtB,qBACA,CAAEQ,IAAK,0BAA2BF,MAG9BG,EAAgB,IAAIC,IAAIH,EAAII,aAE5BC,EAAmBH,EAAcI,aAAaC,IAAI,iBAIlDC,EAASN,EAAcI,aAAaC,IAAI,SAI9CL,EAAcI,aAAaG,OAAO,SAElCpB,EAAaK,MAAQ,CACnBI,SAAUjB,EAAMC,KAChBsB,YAAaF,EAAcQ,WAC3BF,OAAQA,EAAOG,MAAM,KACrBC,eAAgB,IAChBC,MAAOhB,EACPiB,aAAc,IACTjB,EACHQ,qBAIJlB,EAAQO,OAAQ,IDkBX,CAACqB,EAAUC,MACRC,EAAAA,EAAAA,cCVRC,EAAAA,EAAAA,oBAUM,MAVN1C,EAUM,EATJ2C,EAAAA,EAAAA,oBAQS,UAPP/B,IAAI,MACJX,MAAM,iBACN2C,MAAA,qBACCC,SAAUlC,EAAAO,MACV4B,QAAO9B,IDWP+B,EAAAA,EAAAA,kBCTEC,EAAAA,EAAAA,OAAAlC,EAAAkC,CAAE,iCAAD,EAAA9C,KDYV,IElFA,MAAM+C,EAAc,EAEpB,O","sources":["webpack://epinio-1.12.0/./login/epinio.vue?52ba","webpack://epinio-1.12.0/./login/epinio.vue","webpack://epinio-1.12.0/./login/epinio.vue?47d6"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"text-center\" }\nconst _hoisted_2 = [\"disabled\"]\n\nimport { onMounted, ref } from 'vue';\nimport { useStore } from 'vuex';\n\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'epinio',\n  props: {\n    name: {}\n  },\n  setup(__props: any) {\n\nconst store = useStore();\nconst loading = ref<boolean>(true);\nlet redirectOpts = ref<object>({});\nconst t = store.getters['i18n/t'];\n\nconst props = __props;\n\nonMounted(async () => {\n  /* Fetch the dex redirect url.\n  *\n  * The dashboard would normally get this directly from the auth provider, \n  * however epinio/dex implement pkce flow (additional per request validation). \n  * To support this the redirect url is per request and thus generated by the \n  * BE per login. Unfortunately this process also requires the state to be \n  * known up front, so for this provider we create it upfront and pass through\n  * to the auth store. */\n  const baseNonce = await store.dispatch(\n    'auth/createNonce', \n    { provider: 'epinio' },\n  );\n  const encodedNonce = await store.dispatch('auth/encodeNonce', baseNonce);\n  const res = await store.dispatch(\n    'management/request', \n    { url: `/dex/redirectUrl?state=${ encodedNonce }` },\n  );\n\n  const redirectAsUrl = new URL(res.redirectUrl);\n  // We'll need to save this locally for when we exchange the code for a token\n  const pkceCodeVerifier = redirectAsUrl.searchParams.get('code_verifier');\n\n  // The scopes in the redirect url are pulled out and reapplied, however this \n  // does not work for dex (a decoded space separator).\n  const scopes = redirectAsUrl.searchParams.get(`scope`); // This decodes it\n\n  // redirectTo mangles the different scopes together incorrectly, and we're \n  // supply our own mangled version anyway, so nuke.\n  redirectAsUrl.searchParams.delete('scope');\n\n  redirectOpts.value = {\n    provider: props.name,\n    redirectUrl: redirectAsUrl.toString(),\n    scopes: scopes.split(' '), // Put it in the format expcted by the `redirectTo` action\n    scopesJoinChar: ' ',\n    nonce: baseNonce,\n    persistNonce: {\n      ...baseNonce,\n      pkceCodeVerifier\n    }\n  };\n\n  loading.value = false;\n});\n\nfunction login() {\n  store.dispatch('auth/redirectTo', redirectOpts.value);\n};\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createElementVNode(\"button\", {\n      ref: \"btn\",\n      class: \"btn bg-primary\",\n      style: {\"font-size\":\"18px\"},\n      disabled: loading.value,\n      onClick: login\n    }, _toDisplayString(_unref(t)('epinio.login.genericProvider')), 9, _hoisted_2)\n  ]))\n}\n}\n\n})","<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue';\nimport { useStore } from 'vuex';\n\nconst store = useStore();\nconst loading = ref<boolean>(true);\nlet redirectOpts = ref<object>({});\nconst t = store.getters['i18n/t'];\n\nconst props = defineProps<{ \n  name: string;\n}>();\n\nonMounted(async () => {\n  /* Fetch the dex redirect url.\n  *\n  * The dashboard would normally get this directly from the auth provider, \n  * however epinio/dex implement pkce flow (additional per request validation). \n  * To support this the redirect url is per request and thus generated by the \n  * BE per login. Unfortunately this process also requires the state to be \n  * known up front, so for this provider we create it upfront and pass through\n  * to the auth store. */\n  const baseNonce = await store.dispatch(\n    'auth/createNonce', \n    { provider: 'epinio' },\n  );\n  const encodedNonce = await store.dispatch('auth/encodeNonce', baseNonce);\n  const res = await store.dispatch(\n    'management/request', \n    { url: `/dex/redirectUrl?state=${ encodedNonce }` },\n  );\n\n  const redirectAsUrl = new URL(res.redirectUrl);\n  // We'll need to save this locally for when we exchange the code for a token\n  const pkceCodeVerifier = redirectAsUrl.searchParams.get('code_verifier');\n\n  // The scopes in the redirect url are pulled out and reapplied, however this \n  // does not work for dex (a decoded space separator).\n  const scopes = redirectAsUrl.searchParams.get(`scope`); // This decodes it\n\n  // redirectTo mangles the different scopes together incorrectly, and we're \n  // supply our own mangled version anyway, so nuke.\n  redirectAsUrl.searchParams.delete('scope');\n\n  redirectOpts.value = {\n    provider: props.name,\n    redirectUrl: redirectAsUrl.toString(),\n    scopes: scopes.split(' '), // Put it in the format expcted by the `redirectTo` action\n    scopesJoinChar: ' ',\n    nonce: baseNonce,\n    persistNonce: {\n      ...baseNonce,\n      pkceCodeVerifier\n    }\n  };\n\n  loading.value = false;\n});\n\nfunction login() {\n  store.dispatch('auth/redirectTo', redirectOpts.value);\n};\n</script>\n\n<template>\n  <div class=\"text-center\">\n    <button\n      ref=\"btn\"\n      class=\"btn bg-primary\"\n      style=\"font-size: 18px;\"\n      :disabled=\"loading\"\n      @click=\"login\"\n    >\n      {{ t('epinio.login.genericProvider') }}\n    </button>\n  </div>\n</template>\n\n","import script from \"./epinio.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./epinio.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","_defineComponent","__name","props","name","setup","__props","store","useStore","loading","ref","redirectOpts","t","getters","login","dispatch","value","onMounted","async","baseNonce","provider","encodedNonce","res","url","redirectAsUrl","URL","redirectUrl","pkceCodeVerifier","searchParams","get","scopes","delete","toString","split","scopesJoinChar","nonce","persistNonce","_ctx","_cache","_openBlock","_createElementBlock","_createElementVNode","style","disabled","onClick","_toDisplayString","_unref","__exports__"],"sourceRoot":""}